const connDB =  async () => {
    try{
      await mongoose.connect(dbURI, {
       useUnifiedTopology: true ,
       useNewUrlParser: true,
       useCreateIndex: true,
       useFindAndModify: false
      });
      
      console.log('MongoDB Connected....');
    } catch(err) {
      console.error(err.message);
      // exit process with failure
      process.exit(1);
    }
  }
  
  // Init gfs
let gfs;

connectDB('open', () => {
  // Init stream
  gfs = Grid(connectDB.db, mongoose.mongo);
  gfs.collection('uploads');
});

// Create storage engine
const storage = new GridFsStorage({

  url:dbURI ,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});
const upload = multer({ storage });





if (!req.params.user_id.match(!req.user.id) || !filename) {
  return res.status(404).json({ msg: 'File not found' });
}
















// Image Upload 
const conn = mongoose.createConnection(dbURI, {
  useNewUrlParser: true,
  useCreateIndex: true,
  useUnifiedTopology: true ,
  useFindAndModify: false
 })

// Init gfs
let gfs;

conn.once('open', () => {
// Init stream
gfs = Grid(conn.db, mongoose.mongo);
gfs.collection('uploads');
});

// Create storage engine
const storage = new GridFsStorage({
  url:dbURI,
  options: {useUnifiedTopology: true},

  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const UserID = req.user.id;
        console.log('inside the promise:' + UserID);
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          metadata: {user_id: UserID},
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});

const upload = multer({ storage })





// @route GET /
// @desc Loads form
app.get('/', (req, res) => {
  gfs.files.find().toArray((err, files) => {
    // Check if files
    if (!files || files.length === 0) {
      res.render('index', { files: false });
    } else {
      files.map(file => {
        if (
          file.contentType === 'image/jpeg' ||
          file.contentType === 'image/png' ||
          file.contentType === 'image/jpg'
        ) {
          file.isImage = true;
        } else {
          file.isImage = false;
        }
        console.log('loaded')
      });
      res.render('index', { files: files });
    }
  });
});

// @route POST /upload
// @desc  Uploads file to DB
app.post('/upload', auth, //upload.single('file')
(req, res) => {
  
  const _id = req.user.id;
  console.log(_id);
  console.log('I am in the upload route: ' + _id);
    // Check for Image Field
    if (req.file) {
      // Validation
      check('UserID', 'UserID was not received').notEmpty();
      // Checks for errors
      const errors = validationResult(req);
      if (errors) {
          return res.json({ success: false, msg: errors });
      } else {
          console.log('Uploading file...');
          // console.log(req.file);
          // console.log(res);
          return res.json({ success: true, msg: 'file was successfully uploaded' });
      }
  } else {
      // console.log(req.file);
      console.log('There is no file to upload...');
      return res.json({ success: false, msg: 'No file was found to upload' });
  }
  //res.json({ file: req.file });
   //res.redirect('/');
 });
 
 // @route GET /files
 // @desc  Display all files in JSON
 app.get('/files', (req, res) => {
   gfs.files.find().toArray((err, files) => {
     // Check if files
     if (!files || files.length === 0) {
       return res.status(404).json({
         err: 'No files exist'
       });
     }
 
     // Files exist
     return res.json(files);
   });
 });
 
 // @route GET /files/:filename
 // @desc  Display single file object
 app.get('/files/:filename', (req, res) => {
   gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
     // Check if file
     if (!file || file.length === 0) {
       return res.status(404).json({
         err: 'No file exists'
       });
     }
     
     // File exists
     return res.json(file);
     
   });
 });
 
 // @route GET /image/:filename
 // @desc Display Image
 app.get('/image/:filename', (req, res) => {
   gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
     // Check if file
     if (!file || file.length === 0) {
       return res.status(404).json({
         err: 'No file exists'
       });
     }
     //if (!req.params.user_id.match(!req.user.id) || !filename) {
     // return res.status(404).json({ msg: 'File not found' });
    //}//
 
     // Check if image
     if (file.contentType === 'image/jpeg' || file.contentType === 'image/png' || file.contentType === 'image/jpg') {
       // Read output to browser
       const readstream = gfs.createReadStream(file.filename);
       console.log(file.filename)
       readstream.pipe(res);
       
     } else {
       res.status(404).json({
         err: 'Not an image'
       });
     }
   });
 });
 
 // @route DELETE /files/:id
 // @desc  Delete file
 app.delete('/files/:id', (req, res) => {
   gfs.remove({ _id: req.params.id, root: 'uploads' }, (err, GridFSBucket) => {
     if (err) {
       return res.status(404).json({ err: err });
     }
 
     res.redirect('/');
   });
 });
 

 pp.post('/',upload.single('file'), function(req, res){
  var newProduct = new Product();
newProduct.image.data = fs.readFileSync(req.body.files)
newProduct.image.contentType = 'image/png' ||'image/jpg'|| 'image/jpeg';


if(!newProduct){
console.log("There was an error");
res.redirect('/');

}else{
var newPath = __dirname + "/uploads/product/" + newProduct;

fs.writeFile(newPath, data, function(err){
    res.redirect("/uploads/product/" + newProduct);
    newProduct.save();
    res.json('succes')
});
}


});
 

let upload = multer({
  storage: multer.diskStorage({
    destination: (req, file, callback) => {
      let type = req.params.type;
      let path = './uploads/product';
      fs.mkdirsSync(path);
      callback(null, path);
    },
  filename: (req, file, callback) => {
      //originalname is the uploaded file's name with extn
      callback(null, file.originalname);
    
const fileFilter = (req, file, cb) => {
  // reject a file
  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png' || file.mimetype === 'image/jpg') {
    cb(null, true);
  } else {
    cb(null, false);
  }
}}
})
})







const { image, name} = req.body;
      
  
const productFields = {};
productFields.user = req.user;
if (name) productFields.name = name;
if (image) productFields.image = image;

try {
  let product = await Product.findOne({ user: req.user});

  if(product) {
      //Update
      product = await Product
      .findOneAndUpdate(
          { user: req.user},
          { $set: productFields},
          { new: true }
          );

          return res.json(product);
  }

  // Create
product= new Product(productFields);
await product.save();
res.json(product);

} catch(err) {
  console.error(err.message);
  res.status(500).send('Server Error');
}
}

);



var express = require('express');
const app = express.Router();
var fs = require('fs');
var mongoose = require('mongoose');
// @ts-ignore
var multer = require('multer');
const config = require('config');
const db = config.get('mongoURI');
const bodyParser = require('body-parser');
const { check, validationResult } = require('express-validator');


const Product = require('../../models/Product');


app.use(express.json());

app.use(express.static(__dirname));

app.get('/',  (req, res)=> res.send('User route'));

mongoose.connect(db, {
  useNewUrlParser: true,
  useCreateIndex: true,
  useUnifiedTopology: true ,
  useFindAndModify: false
 });



var storage = multer.diskStorage({
destination: function (req, file, cb) {
  cb(null,__dirname)
},

 filename: function (req, file, cb) {
 console.log(file);
 let extArray = file.mimetype.split("/");
let extension = extArray[extArray.length - 1];

cb(null, file.fieldname + '-' + Date.now() + '.' + extension);
 //cb(null, file.originalname + '-' + Date.now() + '.' + extension);
}
})

var upload = multer({ storage: storage }).single('avatar');




app.post('/', upload , async (req, res) => {
 
         
 
       const { image, name} = req.body;
      
  
       const productFields = {};
       productFields.user = req.user;
       if (name) productFields.name = name;
       if (image) productFields.image = image;

     try {
         let product = await Product.findOne({ user: req.user});
 
         if(product) {
             //Update
             product = await Product
             .findOneAndUpdate(
                 { user: req.user},
                 { $set: productFields},
                 { new: true }
                 );
 
              
         }
 
         // Create
       product= new Product(productFields);
       await product.save();
       res.json(product);
 
     } catch(err) {
         console.error(err.message);
         res.status(500).send('Server Error');
     }
 }
    
 );




 


module.exports = app;







app.use(function(req, res, next) { 
  //allow cross origin requests
  res.setHeader("Access-Control-Allow-Methods", "POST, PUT, OPTIONS, DELETE, GET");
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  res.header("Access-Control-Allow-Credentials", true);
  next();
});



















app.post('/',  upload.single('userImage'),
[
    check('name', 'Name is Required')
    .not()
    .isEmpty(),
    check('email', 'Please provide a valid email').isEmail(),
    check('password', 'Please enter a password with 6 or more characters').isLength({min: 6})
    ],
     async (req, res) => {


        
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        return res.status(400).json({errors: errors.array() });
    }
    
   const{name, email, password, avatar} = req.body;
   const{image} = req.file.path
    
 

    try {

 // see if the user exists
let user = await User.findOne({ email });

if(user) {
   return res.status(400).json({errors: [{msg: 'User already exists'}] });
}
//

 
user = new User({
    name,
    email,
    avatar,
    image,
   password
});

//encrypt password
const salt = await bcrypt.genSalt(10);
user.password = await bcrypt.hash(password, salt);

user.image.data = fs.readFileSync(req.files.image.path)
user.image.contentType = 'image/png' || 'image/jpg' || 'image/jpeg'

 await user.save();

 //return jsonwebtoken
const payload = { 
    user : {
       id: user.id
 }
   }

jwt.sign(
    payload,
    config.get('jwtSecret'),
    {expiresIn: 3600000},
    (err, token) => {
       if(err) throw err ;
       res.json({ token });
      }
    );

    } catch(err) {
     console.error(err.message);
     res.status(500).send('Server Error');
    }
    res.send('succes');
});



app.post("/", upload.single('userImage'), (req, res, next) => {
  const product = new User({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
    userImage: req.file.path 
  });
  product
    .save()
    .then(result => {
      console.log(result);
      res.status(201).json({
        message: " User created successfully",
        createdUser: {
            name: result.name,
            email: result.email,
            password: result.password,
            userImage: result.userImage,
            request: {
                type: 'GET',
                url: "http://localhost:5000/api/users/" + result._id
            }
        }
      });
    })
    .catch(err => {
      console.log(err);
      res.status(500).json({
        error: err
      });
    });
});








   <i className="" >< Avatar size="150px" round="50%" src={user.userImage}
             
              alt=""/>Welcome {user.name}</i>